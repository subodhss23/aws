1. deployment, sign for users, distributed tracing, serverless compute, messaging queues, etc

2. About the project/web application on flask
    upload photo,secure directory, user registration, password validation, email validation,password reset
app stores collection of images, storage is needed, structued data, print the photo
troubleshoot and optimize, latency


- service oriented architecture exposed with aws api

===============================================================================================
ssh into the aws instance
==============================
- curl http://169.254.169.254/latest/dynamic/instance-identity/document (instance identity doc)
- cat /var/log/cloud-init-output.log (view log of instance)
    ************************
    important curl links
    - curl http://169.254.169.254/latest/dynamic/instance-identity/document
        (identy documenet for your instance)
    - curl http://169.254.169.254/latest/meta-data/public-ipv4
        (instance public ip address)
    - curl http://169.254.169.254/latest/meta-data/mac
        (mac address of the instance)
    - curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/Your-MAC/vpc-id
        (to get vpc id in which the instance resides) replace mac adddress
    - curl http://169.254.169.254/latest/meta-data/network/interfaces/macs/Your-MAC/subnet-id
        (to get the subnet-id in which the instance resides)
    - curl http://169.254.169.254/latest/user-data
        ( to get the instance user data)




PART - 2

The app will need:-
   -image storage, database access, and image analysis
   -api and sdks(boto python sdk
   -identity and access management(authentication and authorization in aws)
   - image analysis

*** aws API's
    makes easy by providing sdk's - using boto python with pip
    - need user and authentication credentials(access key and secret key)
    - IAM ( file called credentials) 


===================================================================================
- cloudformation
- created new user from root user and start using from another user
- used key pair to ssh into the machine

==================================================================================

S3 - the bucket
=======================
- they are private, only the user who created them can access them
- access control via three methods
    a) policies     - JSON
    b) IAM users and groups     - give access to group or user
    c) Access control lists     - aws account

====================================
CLOUD 9
===================================
IDE inside aws
- compile flask app and connect with s3 bucket to uplaod picture

=======================================
amazon rekogination
=================================
- object and scene detection
- facial analysis
- facial recogination

detect-labels
detect-faces

**** adding rekogniation on the app

===================================
IAM roles
==================================
- users, groups or roles
- roles -> truested identity for certain period of time (security token service)
    - can be service, another aws account(can be revoked after the job is done)


======  RDS ============
**** adding database.py as a database for the app(script database_create_table.py)

===========================

IntroduCtion to availabilty
- recovering from hardware failure automatically
- resilient

************** LOAD BALANCING**************
- ELB (Elastic load balancer)
- within EC2 there is load balancer in aws console
- week three (go back for review) last video(for configuration)
===============================================================

****** amazon cognito*******************

- concept of authenticated user
- authentication and authorization which is inside the app
    (can be an easy attack vector)


+++++++++++ overview of app till now++++++++++
1. photos -> S3     (issuing presign urls)
2. list of photos and tags -> RDS database
3. need to add directory of user and autheticate them
    user info -->   cognito
**** seperation of authentication from authorization *****
 



